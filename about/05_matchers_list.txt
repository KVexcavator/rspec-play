Матчеры  делятся на три широкие категории:
• Примитивные матчеры для основных типов данных, таких как строки, числа и т. д.
• Матчеры высокого уровня, которые могут принимать другие матчеры в качестве входных данных, а затем (среди прочего) применять их к коллекциям.
• Матчеры блоков для проверки свойств кода, включая блоки, исключения и побочные эффекты.
=============================================
Особенности примитивных матчеров:
---------------------------------------------
- эквивалентность значений
expect(Math.sqrt(9)).to eq(3) эквивалентно Math.sqrt(9) == 3
---------------------------------------------
- идентификация значений
perms = = Permutations.new
first_try = perms.of(long_word_list)
second_try = perms.of(long_word_list)
нужно выянить, действительно ли first_try и second_try ссылаются на один и тот же базовый объект, а не только на две копии с идентичным содержимым.
expect(second_try).to equal(first_try)
be(x) алиас equal(x)
expect(RSpec.configuration).to be(RSpec.configuration)
--------------------------------------------
- эквивалентность ключей хаша
применяется eql, которое ведет себя как eql? в Ruby, в отличие от eq считает целые числа и числа с плавающей запятой разными
expect(3).not_to eql(3.0) => error
-------------------------------------------
- вариации
У примитивных матчеров есть алиасы:
• an_object_eq_to алиас eq
• an_object_equal_to алиас equal
• an_object_eql_to алиас eql
Пример применения
expect([String, Regexp]).to include(an_object_eq_to String)
-------------------------------------------
- правдивость
expect(true).to be_truthy
expect(0).to be_truthy
expect(false).not_to be_truthy
expect(nil).not_to be_truthy
# ...and on the flip side:
expect(false).to be_falsey
expect(nil).to be_falsey
expect(true).not_to be_falsey
expect(0).not_to be_falsey

значение точно равно истинному или ложному
expect(1.odd?).to be true
expect(2.odd?).to eq false

алиасы:
be_truthy - a_truthy_value
be_falsey - be_falsy, a_falsey_value, a_falsy_value
-------------------------------------
Сравнения:
expect(1).to be == 1
expect(1).to be < 2
expect(1).to be <= 2
expect(2).to be > 1
expect(2).to be >= 1
expect(String).to be === 'a string'
expect(/foo/).to be =~ 'food'

исползование сравнений внутри другого матчера с алиасом a_value:
squares = 1.upto(4).map { |i| i * i }
expect(squares).to include(a_value > 15)
--------------------------------------
- Сравнение дельты и диапазона
expect(0.1 + 0.2).to eq(0.3) вернет ошибку

fluent interface:
expect [actual] to be within [delta] of [expected]

Абсолютная разница
Значение, которое мы передали здесь be_within, представляет собой дельту или абсолютную разницу в любом направлении. Это конкретное ожидание выполняется, пока значение находится между 0,2999 и 0,3001:
expect(0.1 + 0.2).to be_within(0.0001).of(0.3)

Относительная разница
в процентах от базового значения
town_population = 1237
expect(town_population).to be_within(25).percent_of(1000)

Диапазон:
expect(town_population).to be_between(750, 1250)
по умолчанию он включающий, но можно явно переключать:
be_between(x, y).inclusive или be_between(x, y).exclusive
-------------------------------------------
- Динамические предикаты
В Ruby предикаты это методы типа empty?, возвращают булево значение
В RSpec поддерживается динамическое превращение таких методов по шаблону be_чтото:
expect([]).to be_empty

Если есть user с предикатом admin? то можно юзать:
expect(user).to be_admin
expect(user).to be_an_admin

Для предикатов, начинающихся с has_ , таких как hash.has_key?(:age) , вы можете использовать динамическое сопоставление предикатов, начинающееся с have_ :
hash = { name: 'Harry Potter', age: 17, house: 'Gryffindor' }
expect(hash).to have_key(:age)

Прочие нюaнсы:
В диншимические предикаты можно передавать аргументы и блоки
expect(user.admin?).to eq(true) вернет ошибку
expect(array_of_hashes).to include(have_key(:lol)) пример комбинирования
---------------------------------
Матчер satisfy
применяется с блоками
expect(1).to satisfy { |number| number.odd? }
expect([1, 2, 3]).to include(an_object_satisfying(&:even?))
==================================
Higher-Order Matchers
----------------------------------
Для коллекций и  строк:

- include
требует наличия определенных элементов (в любом порядке):
expect('a string').to include('str')
expect([1, 2, 3]).to include(3)
для хешей
hash = { name: 'Harry Potter', age: 17, house: 'Gryffindor' }
expect(hash).to include(:name)
expect(hash).to include(age: 17)
много аргументов
expect('a string').to include('str', 'ing')
expect([1, 2, 3]).to include(3, 2)
expect(hash).to include(:name, :age)
expect(hash).to include(name: 'Harry Potter', age: 17)
такое не отработает, ждёт вроде [1, [3, 2]]
expecteds = [3, 2]
expect([1, 2, 3]).to include(expecteds)
надо использовать
expect([1, 2, 3]).to include(*expecteds)

- start_with и end_with
требуют, чтобы элементы находились в начале или в конце:
expect('a string').to start_with('a str').and end_with('ng')
expect([1, 2, 3]).to start_with(1).and end_with(3)
несколько аргументов
expect([1, 2, 3]).to start_with(1, 2)
expect([1, 2, 3]).to end_with(2, 3)
алиасы
• a_string_starting_with / a_string_ending_with
• a_collection_starting_with / a_collection_ending_with
Комбинирование
expect(['list', 'of', 'words']).to start_with(
  a_string_ending_with('st')
  ).and end_with(
  a_string_starting_with('wo')
)

- all
проверяет общее свойство для всех элементов:
numbers = [2, 4, 6, 8]
expect(numbers).to all be_even

- match
проверяет структуру данных по шаблону:
expect('a string').to match(/str/)
expect('a string').to match('str')
Можно заменить любой элемент массива или любое хеш-значение на любом уровне вложенности:
children = [
  { name: 'Coen', age: 6 },
  { name: 'Daphne', age: 4 },
  { name: 'Crosby', age: 2 }
]
expect(children).to match [
  { name: 'Coen', age: a_value > 5 },
  { name: 'Daphne', age: a_value_between(3, 5) },
  { name: 'Crosby', age: a_value < 3 }
]
алиасы
an_object_matching и a_string_matching
для матчера порядок важен

- contains_exactly
требует наличия определенных элементов и никаких других (в любом порядке):
порядок не важен
expect(children).to contain_exactly(
  { name: 'Daphne', age: a_value_between(3, 5) },
  { name: 'Crosby', age: a_value < 3 },
  { name: 'Coen', age: a_value > 5 }
)
алиас для включения в include
a_collection_containing_exactly
--------------------------------------------
Для отрибутов обьектов:
require 'uri'
uri = URI('http://github.com/rspec/rspec')
expect(uri).to have_attributes(host: 'github.com', path: '/rspec/rspec')
для комбинирования с include с алиасом an_object_having_attributes
an_object_having_attributes
============================================
Block Matchers
--------------------------------------------
raise_error
expect { raise 'boom' }.to raise_error('boom')

• raise_error без аргументов, если возникла какая-либо ошибка.
• raise_error(SomeErrorClass), если вызывается SomeErrorClass или подкласс.
• raise_error('некоторое сообщение'), если ошибка вызвана сообщением, точно равным заданной строке.
• raise_error(/some regex/), если ошибка вызвана сообщением, соответствующим заданному шаблону.

Можно комбинировать
raise_error(SomeErrorClass, "some message")
raise_error(SomeErrorClass, /some regex/)
raise_error(SomeErrorClass).with_message("some message")
raise_error(SomeErrorClass).with_message(/some regex/)

Передача других матчеров
expect {
'hello'.world
}.to raise_error(an_object_having_attributes(name: :world))
----------------------------------------
throw_symbol
expect { throw :found }.to throw_symbol(:found)
expect { throw :found, 10 }.to throw_symbol(:found, a_value > 9)
Исключения предназначены для исключительных ситуаций, таких как ошибка в логике программы. Они не подходят для повседневного потока управления, например, для выхода из глубоко вложенного цикла или вызова метода. Для подобных ситуаций в Ruby предусмотрена конструкция throw.
----------------------------------------
Yielding

yield_control
def self.just_yield
  yield
end
expect { |block_checker| just_yield(&block_checker) }.to yield_control
дополнительные методы проверки передачи блокам
once , twice , thrice , exactly(n).times , at_least(n).times or at_most(n).times
expect { |block| 2.times(&block) }.to yield_control.twice
expect { |block| 2.times(&block) }.to yield_control.at_most(4).times
expect { |block| 4.times(&block) }.to yield_control.at_least(3).times

yield_with_args
def self.just_yield_these(*args)
  yield(*args)
end
expect { |block|
  just_yield_these(10, 'food', Math::PI, &block)
}.to yield_with_args(10, /foo/, a_value_within(0.1).of(3.14))

yield_with_no_args
expect { |block| just_yield_these(&block) }.to yield_with_no_args

yield_successive_args
expect { |block|
  ['football', 'barstool'].each_with_index(&block)
}.to yield_successive_args(
  [/foo/, 0],
  [a_string_starting_with('bar'), 1]
)
----------------------------------------------------
Mutation
В дикой природе внешние действия, такие как отправка веб-формы, обычно изменяют некоторое состояние внутри системы. Сопоставитель изменений помогает указать такие виды мутаций. Вот сопоставитель в его самой простой форме:
array = [1, 2, 3]
expect { array << 4 }.to change { array.size }
можно использовать by , by_at_least или by_at_most, чтобы указать сумму изменения:
expect { array.concat([1, 2, 3]) }.to change { array.size }.by(3)
expect { array.concat([1, 2, 3]) }.to change { array.size }.by_at_least(2)
expect { array.concat([1, 2, 3]) }.to change { array.size }.by_at_most(4)
уточнить количекство изменений
expect { array << 4 }.to change { array.size }.from(3)
expect { array << 5 }.to change { array.size }.to(5)
expect { array << 6 }.to change { array.size }.from(5).to(6)
expect { array << 7 }.to change { array.size }.to(7).from(6)
передать матчер в блокам
x = 5
expect { x += 10 }.to change { x }
  .from(a_value_between(2, 7))
  .to(a_value_between(12, 17))

негатифная форма
x = 5
expect { }.not_to change { x }.from(5)
--------------------------------------------
вывод в терминал
expect { print 'OK' }.to output('OK').to_stdout
expect { warn 'problem' }.to output(/prob/).to_stderr
expect { system('echo OK') }.to output("OK\n").to_stdout_from_any_process
