Конфигурация командной строки
rspec --help
-------------------------------------
Параметры среды
-I PATH  Укажите PATH для добавления к $LOAD_PATH (может использоваться более одного раза).
RSpec уже добавляет два самых важных каталога в путь загрузки: папки вашего проекта lib и spec. Но иногда вы можете захотеть использовать конкретную библиотеку, минуя Bundler или RubyGems; вот где этот флаг пригодится.
-r, --require PATH передать файл
также пользуют для подключения библиотек, например rspec -rbyebug
------------------------------------
Параметры фильтрации
rspec path/to/a_spec.rb:37
запустить конкретный пример или группу по номеру строки
--only-failures
Эта опция упрощает повторный запуск только ошибок.
--next-failure
исправить и протестировать каждую ошибку одну за другой
--example 'часть описания'
что то найти по части описания
--tag tag_name
найти по имени тегов
-------------------------------------
Параметры вывода
--backtrace
больше контекста для отладки
--dry-run
в сочетании с --format doc — полезный способ быстро получить похожий на документацию вывод
--warnings
вклюсить режим предупреждения
======================================
Установка значений по умолчанию для командной строки
~/.rspec
в home глобальные настройки
./.rspec
файл в корневом каталоге проекта
./.rspec-local
находится рядом с файлом .rspec проекта, предназначен для личных предпочтений, обязательно исключите его из вашей системы контроля версий.

* локальные параметры имеют приоритет над более глобальными. Например, если в файле .rspec задан параметр --profile 5 переопределится --no-profile в файл проекта .rspec-local.
* переменная окружения SPEC_OPTS - установленные здесь значения переопределяют значения, установленные в текстовых файлах.
-------------------------------------
Hooks
Хуки позволяют вам объявлять фрагменты кода, которые выполняются до, после или вокруг ваших спецификаций. (before , after ,around)
config.before(:example) do
в отдельных случаях можно зацепить через тег
RSpec.configure do |config|
  config.when_first_matching_example_defined(:db) do
    require 'support/db'
  end
end
--------------------------------------
Расширение модулями
config.include ExtraExampleMethods - в каждый пример добавляет метод
config.prepend ImportantExampleMethods - в каждом примере заменяет метод
config.extend ExtraGroupMethods - каждой группе добавляет методы

если нужно поделиться например, хуками или определениями let — нужно определить общую группу примеров. Затем добавить эту общую группу в свой блок конфигурации:
config.include_context 'My Shared Group'
------------------------------------
Фильтация
config.example_status_persistence_file_path = 'spec/examples.txt'
где сохранять статус
config.filter_run_excluding :specific_to_some_os
Исключает примеры из запуска; полезно для постоянных исключений на основе факторов среды, таких как ОС, версия Ruby или переменная среды.
config.filter_run_when_matching :some_metadata
фиьтр по тегам, например, RSpec запускает только примеры с метаданными :focus.
------------------------------------
Метаданные
- сonfig.define_derived_metadata(file_path: /unit/) { |meta| meta[:type] = :unit }
Здесь мы помечаем все спецификации в каталоге юнитов типом: :unit.
- config.alias_example_to :alias_for_it, some_metadata: :value
Определяет альтернативу встроенному методу it, который создает пример и прикрепляет метаданные.
- config.alias_example_group_to :alias_for_describe, some_metadata: :value
Определяет альтернативу встроенному методу describe, который создает группу примеров и прикрепляет метаданные.
------------------------------------
Опции вывода информации(Output Options)
- config.warnings = true
Включает режим предупреждений Ruby, если не используется что-то вроде ruby_warning_filter, чтобы убрать часть шума.
- config.profile_examples = 2
RSpec измерит, сколько времени заняла каждая спецификация, и напечатает заданное количество самых медленных примеров и групп

- config.backtrace_exclusion_patterns << /vendor/
Исключает из трассировки все строки, соответствующие заданным регулярным выражениям; например, строки, содержащие текст vendor
- config.filter_gems_from_backtrace :rack, :sinatra
Исключает из трассировки сткрки из определенных библиотек

- config.add_formatter Fuubar # gem 'fuubar'
- config.add_formatter 'documentation', $stdout
- config.add_formatter 'html', 'specs.html'
куча способов, добавить форматирование от кастомных до гемов (стр 150-160)
- config.default_formatter = config.files_to_run.one? ? 'doc' : 'progress'
RSpec по умолчанию будет использовать форматировщик более подробной документации, если вы запускаете только один файл спецификаций, или форматировщик прогресса, если вы запускаете несколько файлов.
-----------------------------------------
Конфигурация библиотек
Помимо встроеных моков, есть гемы, например гем Mocha.
config.mock_with :mocha

RSpec также поддерживает библиотеки имитации :rr и :flexmock.
config.mock_with :rspec do |mocks|
  mocks.verify_partial_doubles = true
  mocks.verify_doubled_constant_names = true
end
- mocks.verify_partial_doubles = true
Проверяет, что каждый частичный двойник — нормальный объект, который был частично изменен с помощью тестового двойника — соответствует исходному интерфейсу объекта.
- mocks.verify_doubled_constant_names = true
При создании проверочного двойника с использованием такой строки, как SomeClassName" , RSpec проверит, что SomeClassName действительно существует.
-----------------------------------------
Ожидания(Expectations)
expect_with позволяет вам выбрать другую структуру утверждений вместо rspec-expectations:
config.expect_with :minitest, :rspec, Wrong # gem wrong
----------------------------------------
Экзотические настройки

- сonfig.disable_monkey_patching!
старый синтаксис спек
knife.should be_useful
в новом синтаксисе тоже самое
expect(knife).to be_useful
лучше выключить от греха

- config.order = :random
порядок вывода спек, рандом, что бы глаз не замылился
