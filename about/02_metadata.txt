example.metadata выведет все метаданные
добавить метаданные можно после описания
запятая :someone или someone: true
----------------------------------------
Производные метаданные(Derived Metadata)
Например, вы можете пометить свои самые быстрые примеры как :fast , а затем запустить только эти спецификации, используя опцию --tag RSpec:
rspec --tag fast
Можно добавить метаданные :fast к каждому примеру в папке spec/unit
RSpec.configure do |config|
  config.define_derived_metadata(file_path: /spec\/unit/) do |meta|
    meta[:fast] = true
  end
end
define_derived_metadata проверяет каждый пример на соответствие выражению фильтра, которое мы ему даем. Здесь file_path: /spec\/unit/ , означает «соответствовать примерам, определенным в каталоге spec/unit».
-------------------------------------------
Метаданные по умолчанию(Default Metadata)
включите что-то по умолчанию для всех ваших примеров, но разрешите отдельным примерам отказаться
Например,с :aggregate_failures выполнение не будет останавливаться при каждом падениии.Для отдельных примеров мы явно добавляем тег в описании и отменяем такое поведение
RSpec.configure do |config|
  config.define_derived_metadata do |meta|
    meta[:aggregate_failures] = true unless meta.key?(:aggregate_failures)
  end
end
------------------------------------------
Выборочный запуск спеков
отключить
config.filter_run_excluding :jruby_only unless RUBY_PLATFORM == 'java'
включить
config.filter_run_when_matching :focus
------------------------------------------
запуск по тегу из консоли
rspec --tag fast
тильда тег исключения
rspec --tag ~fast (в некоторых терминалах rspec --tag '~fast')
------------------------------------------
:aggregate_failures
Изменяет то, как RSpec реагирует на сбой, чтобы каждый пример выполнялся до завершения (вместо остановки при первом неудачном ожидании).
:pending
Указывает, что вы ожидаете, что пример завершится ошибкой; RSpec запустит его и сообщит об этом как ожидающем, если он не прошел, или сообщит об этом как о сбое, если он прошел успешно.
:skip
Указывает RSpec полностью пропустить пример, но по-прежнему перечислять его в списке.
вывод (в отличие от фильтрации, которая пропускает пример из вывода)
:order
Устанавливает порядок, в котором RSpec выполняет ваши спецификации (может быть тот же порядок, как они определены, случайный порядок или пользовательский порядок)
